from conans import ConanFile, tools
from conan.tools.cmake import CMake, CMakeToolchain, cmake_layout

from os import path


class Handy(ConanFile):
    name = "handy"
    license = "MIT"
    author = "adnn"
    url = "https://github.com/ShredEagle/handy"
    description = "Handy classes and functions"
    topics = ("utils")
    settings = "os", "compiler", "build_type", "arch"
    options = {
        "shared": [True, False],
        "build_tests": [True, False],
    }
    default_options = {
        "shared": False,
        "build_tests": False,
    }

    requires = (
        ("boost/1.79.0"),
    )

    build_policy = "missing"
    generators = "CMakeDeps", "CMakeToolchain"

    scm = {
        "type": "git",
        "url": "auto",
        "revision": "auto",
        "submodule": "recursive",
    }


    def _configure_cmake(self):
        cmake = CMake(self)
        cmake.configure()
        return cmake


    def configure(self):
        tools.check_min_cppstd(self, "17")


    def layout(self):
        # Otherwise, root is the folder containing conanfile.py
        self.folders.root = ".."
        # Handles single-config (with subfolders) and multi-config (in a common folder)
        cmake_layout(self)


    def generate(self):
        toolchain = CMakeToolchain(self)
        # cache_variables are written to CMakePresets.json
        toolchain.cache_variables["BUILD_tests"] = str(self.options.build_tests)
        toolchain.generate()


    def build(self):
        cmake = self._configure_cmake()
        cmake.build()


    def package(self):
        cmake = self._configure_cmake()
        cmake.install()


    def package_info(self):
        # Disable the config package that would otherwise be generated by CMakeDeps
        self.cpp_info.set_property("cmake_find_mode", "none")
        # Find CMake-generated package config when consuming the (installed) conan package
        self.cpp_info.builddirs = [path.join("lib", "cmake")]
